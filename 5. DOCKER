MONOLITHIC: SINGLE APP -- > SINGLE SERVER -- > SINGLE DATABASE
MICRO SERVICES: SINGLE APP -- > MULTIPLE SERVERS -- > MULTIPLE DATABASES

MICRO:
COST WILL BE HIGH
MAINTAINANCE


LIMITATIONS OF MONLITHIC:
1. SERVER PERFOMANCE


CONTAINERS:
SERVER = CONTAINER

Containers will not have os by default.
cant able to install pacakages
cant able to deploy the app.

images: inside the image we have os and packages

image (os) -- > conatiner (app)

VIRTUALIZATION: process of utilizing hardware resources in better.
CONTAINERIZATION: process of packing application with its dependencies
APP: PUBG DEPENDENCY: MAPS

PUBG:
APP: PLAYSTORE MAPS: INTERNET

DOCKER:
its a free and open-source platform.
docker will create containers.
we can create, run, and deploy our apps on containers.
its platform independent (native runs on Linux Distribution).
containers will use host resources (cpu, mem, ram, os)
docker will perform os level of VIRTUALIZATION called containerization.

year: 2013
developed by: Solomen Hykes and Sebastian Phal
language: go lang


ARCHITECTURE:
DOCKER CLIENT: its a way of interacting with docker (command -- > op)
DOCKER DAEMON: it manage all the docker components (images, cont, volumes, nlw)
DOCKER HOST: where we installed docker
DOCKER REGISTRY: it manages all the  docker images on internet.


INSTALLATION:
yum install docker -y
systemctl start docker
systemctl status docker


docker pull amazonlinux		: to downlaod image
docker run -it --name cont1 amazonlinux : to create conatiner

yum install git -y
yum install maven -y
touch file1

ctrl p q

docker images		: to list images
docker start cont1	: to start cont1
docker stop cont1	: to stop cont1
docker kill cont1	: to stop immedieatly cont1
docker ps 		: to see running containers
docker ps -a		: to see all containers

HISTORY:
  1  yum install docker -y
    2  docker version
    3  systemctl start docker
    4  systemctl status docker
    5  docker version
    6  docker images
    7  docker search amazonlinux
    8  docker pull amazonlinux
    9  docker images
   10  lsblk
   11  cd
   12  cd /
   13  du -sh
   14  docker run -it --name cont1 amazonlinux
   15  docker ps
   16  docker ps -a
   17  docker stop cont1
   18  docker ps
   19  docker ps -a
   20  docker start cont1
   21  docker ps
   22  docker kill cont1
   23  history
=============================================================================================

OS LEVEL VIRTUALIZATION:

NOTE: apt is package manager for ubuntu
Redhat: Yum
Ubuntu: Apt

without running apt update -y we cant install packages

WORKING:
docker pull ubuntu
docker run -it --name cont1 ubuntu
apt update -y
apt install git maven apache2 tree -y
touch file{1..5}

docker commit cont1 raham
docker run -it --name cont2 raham

check version now



DOCKERFILE:
its a way of creating images automatically.
we can reuse the docker file for multiple times.
in Dockerfile D will be Capital always.
Components inside the Dockerfile also Capital.

Dockerfile -- > Image -- > Container -- > 


COMPONENTS:
FROM		: to base image (gives os)
RUN		: to execute linux commands (image creation)
CMD		: to execute linux commands (container creation)
ENTRYPOINT	: high priority than cmd
COPY 		: to copy local files to conatainer
ADD 		: to copy Intenet files to conatainer
WORKDIR		: to go desired folder
LABEL 		: to attach our tags/labels
ENV		: variables which run inside conatiner (image)
ARGS		: variables which run outside conatiner(containers)
VOLUME		: used to create volume for conatiner
EXPOSE		: used to give port number

EX: -1

FROM ubuntu
RUN apt update -y
RUN apt install git maven tree apache2 -y

Build : docker build -t netflix:v1 .
cont: docker run -it --name cont3 netflix:v1


ex-2:
FROM ubuntu
RUN apt update -y
RUN apt install git maven tree apache2 -y
CMD apt install default-jre -y

Build : docker build -t netflix:v2 .
cont: docker run -it --name cont4 netflix:v2

EX-3:

FROM ubuntu
RUN apt update -y
RUN apt install git maven tree apache2 -y
COPY index.html /tmp
ADD https://dlcdn.apache.org/maven/maven-3/3.8.8/binaries/apache-maven-3.8.8-bin.tar.gz /tmp

EX-4:

FROM ubuntu
RUN apt update -y
RUN apt install git maven tree apache2 -y
COPY index.html /tmp
ADD https://dlcdn.apache.org/maven/maven-3/3.8.8/binaries/apache-maven-3.8.8-bin.tar.gz /tmp
WORKDIR /tmp
LABEL author rahamshaik


docker inspect cont7 
docker inspect cont7 | grep -i author


EX-5:

FROM ubuntu
RUN apt update -y
RUN apt install git maven tree apache2 -y
COPY index.html /tmp
ADD https://dlcdn.apache.org/maven/maven-3/3.8.8/binaries/apache-maven-3.8.8-bin.tar.gz /tmp
WORKDIR /tmp
LABEL author rahamshaik
ENV name vijay
ENV client swiggy

run commands inside container
echo $name
echo $client


EX-6:

FROM ubuntu
RUN apt update -y
RUN apt install git maven tree apache2 -y
COPY index.html /tmp
ADD https://dlcdn.apache.org/maven/maven-3/3.8.8/binaries/apache-maven-3.8.8-bin.tar.gz /tmp
WORKDIR /tmp
LABEL author rahamshaik
ENV name vijay
ENV client swiggy
VOLUME ["/volume1"]
EXPOSE 8080

COMMANDS:
docker ps -a -q		: to list conatier ids
docker stop $(docker ps -a -q) : to stop all conatiners
docker rm $(docker ps -a -q) : to delete all conatiners

docker images -q	: to print image ids
docker rmi -f $(docker images -q) : to delete all images

HISTORY: 1  yum install docker -y
    2  service docker start
    3  service docker status
    4  docker pull ubuntu
    5  docker images
    6  docker run -it --name cont1 ubuntu
    7  docker ps -a
    8  docker attach cont1
    9  docker images
   10  docker ps -a
   11  docker commit cont1 raham
   12  docker images
   13  docker run -it --name cont2 raham
   14  vim Dockerfile
   15  docker build -t netflix:v1 .
   16  docker images
   17  docker run -it --name cont3 netflix:v1
   18  vim Dockerfile
   19  docker build -t netflix:v2 .
   20  docker run -it --name cont4 netflix:v2
   21  docker ps -a
   22  vim Dockerfile
   23  docker build -t netflix:v3 .
   24  ll
   25  vim index.html
   26  docker build -t netflix:v3 .
   27  docker run -it --name cont5 netflix:v3
   28  vim Dockerfile
   29  docker build -t netflix:v3 .
   30  docker run -it --name cont6 netflix:v1
   31  docker run -it --name cont7 netflix:v3
   32  docker inspect cont7
   33  docker inspect cont7 | grep -i author
   34  vim Dockerfile
   35  docker build -t netflix:v3 .
   36  docker run -it --name cont8 netflix:v3
   37  vim Dockerfile
   38  docker build -t netflix:v3 .
   39  docker run -it --name cont9 netflix:v3
   40  docker ps -a
   41  vim Dockerfile
   42  docker ps -a
   43  docker ps -a -q
   44  docker stop $(docker ps -a -q)
   45  docker ps -a
   46  docker rm $(docker ps -a -q)
   47  docker ps -a
   48  docker images
   49  docker images -q
   50  docker rmi -f $(docker images -q)
   51  history
==============================================================================================================

VOLUMES:
in docker, we use volumes to store the data.
volume is nothing but a folder inside a container.
we can share a volume from one container to another.
the volume contains the files which have data.
we can attach the single volume to multiple containers.
but at a time we can attach only one volume to one container.
volumes are decoupled (loosely attached)
if we delete the container volume will not be deleted.


METHOD-1:

DOCKER FILE:

FROM ubuntu
VOLUME ["/volume1"]

docker build -t netflix:v1 .
docker run -it --name cont1 netflix:v1
cd volume1
touch file{1..10}
ctrl p q

docker run -it --name cont2 --volumes-from cont1 --privileged=true ubuntu
cd volume1
ll


2. CLI:

docker run -it --name cont3 -v /volume2 ubuntu
cd volume2
touch java{1..10}
ctrl p q

docker run -it --name cont4 --volumes-from cont3 --privileged=true ubuntu
cd volume2
ll
ctrl p q

3. VOLUME MOUNTING:

volume commands:
docker volume create volume3
docker volume ls
docker volume inspect volume3

cd /var/lib/docker/volumes/volume3/_data
touch python{1..10}
ll
docker run -it --name cont5 --mount source=volume3,destination=/volume3 ubuntu


4. MOVING FILES FROM LOCAL TO CONTAINER:

create a connection and attach a volume for it

touch raham{1..10}
docker inspect cont6
docker volume inspect volume4
cp * /var/lib/docker/volumes/volume4/_data


5.
touch raham{1..10}
cp * /home/ec2-user
docker run -it --name cont12 -v /home/ec2-user:/abcd ubuntu

SYSTEM COMMANDS:
docker system df	: show docker components resource utilization
docker system df -v	: show docker components resource utilization individually
docker system prune	: to remove unused docker components

JENKINS SETUP:
docker run -it --name cont1 -p 8080:8080 jenkins/jenkins:lts

HISTORY:
  1  docker --version
    2  vim Dockerfile
    3  docker build -t netflix:v1 .
    4  docker images
    5  docker run -it --name cont1 netflix:v1
    6  docker ps -a
    7  docker run -it --name cont2 --volumes-from cont1 --privileged=true ubuntu
    8  docker run -it --name cont3 -v /volume2 ubuntu
    9  docker run -it --name --volumes-from cont3 --privileged=true cont4
   10  docker run -it --name cont4 --volumes-from cont3 --privileged=true ubuntu
   11  docker volume create volume3
   12  docker volume ls
   13  docker volume inspect volume3
   14  cd /var/lib/docker/volumes/volume3/_data
   15  touch python{1..10}
   16  ll
   17  docker run -it --name cont5 --mount source=volume3 destination=/volume3 ubuntu
   18  docker run -it --name cont5 --mount source=volume3, destination=/volume3 ubuntu
   19  docker run -it --name cont5 --mount source=volume3, dest=/volume3 ubuntu
   20* docker run -it --name cont5 --mount source=volume3,destination=/volume3 ubuntu cd
   21  cd
   22  docker volume create volume4
   23  docker volume ls
   24  docker volume inspect volume4
   25  cd /var/lib/docker/volumes/volume4/_data
   26  touch php{1..10}
   27  docker run -it --name cont6 --mount source=volume4,destination=/volume4 ubuntu
   28  ll
   29  cd
   30  touch raham{1..10}
   31  ll
   32  docker inspect cont6
   33  docker volume inspect volume4
   34  ll
   35  cp * /var/lib/docker/volumes/volume4/_data
   36  docker attach cont6
   37  docker volume inspect volume4
   38  ll
   39  docker run -it --name cont7 -v /root=/abc ubuntu
   40  docker run -it --name cont8 -v /root=abc ubuntu
   41  docker run -it --name cont7 -v /abc ubuntu
   42  docker run -it --name cont8 -v /abc ubuntu
   43  docker run -it --name cont9 -v /abc ubuntu
   44  ll
   45  cp * /home/ec2-user/
   46  cd /home/ec2-user/
   47  ll
   48  docker run -it --name cont10 -v /home/ec2-user/=abcd ubuntu
   49  docker run -it --name cont11 --volume /home/ec2-user/=abcd ubuntu
   50  docker run -it --name cont12 -v /home/ec2-user:abcd ubuntu
   51  docker run -it --name cont12 -v /home/ec2-user:/abcd ubuntu
   52  cd
   53  docker system
   54  docker system df
   55  docker system df -v
   56  docker volume create volume5
   57  docker volume create volume6
   58  docker system df -v
   59  docker pull centos
   60  docker pull amazonlinux
   61  docker system prune
   62  docker kill $(docker ps -a -q)
   63  docker create network raham
   64  docker network create raham
   65  docker network create raham2
   66  docker network create raham1
   67  docker system prune
   68  docker system events
   69  docker run -it --name cont1 -p 8080:8080 jenkins/jenkins:lts
   70  history
[root@ip-172-31-12-122 ~]#
