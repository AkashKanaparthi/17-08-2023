INFRASTRUCTURE:
resources used to run our application on cloud.
ex: ec2, s3, elb, vpc --------------


in genral we used to deploy infra on manual 

Manual:
1. time consume
2. manual work
3. commiting mistakes

Automate -- > Terraform -- > code -- > hcl (Hashicorp configuration languge)



its a tool used to make infrastructure automation.
its a free and opensource.
its platform independent.
it comes on year 2014.
who: mitchel hasimoto 
ownde: hasicorp 
terraform is written on go language.
We can call terraform as IAAC TOOL.

HOW IT WORKS:
terraform uses code to automate the infra.
we use HCL : HashiCorp Configuration Language.

IAAC: Infrastructure as a code.

Code --- > execute --- > Infra 

ADVANTGAES:
1. Reuseable 
2. Time saving
3. Automation
4. Avoiding mistakes
5. Dry run


CFT = AWS
ARM = AZURE
GDE = GOOGLE

TERRAFROM = ALL CLOUDS

INSTALLING TERRAFORM:

sudo yum install -y yum-utils shadow-utils
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
sudo yum -y install terraform
aws configure


mkdir terraform
cd terraform

vim main.tf 

provider "aws" {
region = "us-east-1"
}

resource "aws_instance" "one" {
ami = "ami-03eb6185d756497f8"
instance_type = "t2.micro"
}


TERRAFORM COMMANDS:
terraform init	: initalize the provider plugins on backend
terraform plan	: to create execution plan
terrafrom apply : to create resources
terrafrom destroy : to delete resources

provider "aws" {
region = "ap-south-1"
}

resource "aws_instance" "one" {
count = 5
ami = "ami-0b41f7055516b991a"
instance_type = "t2.micro"
}

terraform apply --auto-approve
terraform destroy --auto-approve


STATE FILE: used to store the resource information which is created by terraform
to track the resource activities
in real time entire resource info is on state file.
we need to keep it safe
if we lost this file we cant track the infra.
Command:
terraform state list

terrafrom target: used to destroy the specific resource 
terraform state list
single target: terraform destroy -target="aws_instance.one[3]"
multi targets: terraform destroy -target="aws_instance.one[1]" -target="aws_instance.one[2]"


TERRAFORM VARIABLES:
provider "aws" {
region = "ap-south-1"
}

resource "aws_instance" "one" {
count = var.instance_count
ami = "ami-0b41f7055516b991a"
instance_type = var.instance_type
}

variable "instance_type" {
description = "*"
type = string
default = "t2.micro"
}

variable "instance_count" {
description = "*"
type = number
default = 5
}

terraform apply --auto-approve
terraform destroy --auto-approve

history:
 1  aws configure
    2  sudo yum install -y yum-utils
    3  sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinu                                                                                                                                                                                                                            x/hashicorp.repo
    4  sudo yum -y install terraform
    5  terraform -v
    6  mdkir terraform
    7  mkdir terraform
    8  cd terraform/
    9  vim main.tf
   10  terraform init
   11  terraform plan
   12  terraform apply
   13  vim main.tf
   14  terraform apply
   15  ll
   16  cat terraform.tfstate
   17  terraform destroy
   18  cat terraform.tfstate
   19  vim main.tf
   20  terraform plan
   21  terraform apply
   22  cat terraform.tfstate
   23  terraform state list
   24  terraform destroy -target="aws_instance.one[4]"
   25  terraform state list
   27  terraform destroy --auto-approve -target="aws_instance.one[3]" -target="aws_instance.one[2]"                                                                                                                                                                                                                         ance.one[0]"
   28  terraform state list
   29  terraform destroy --auto-approve
   30  vim main.tf
   31  terraform plan
   32  terraform apply --auto-approve
   33  vim main.tf
   34  terraform apply --auto-approve
   35  terraform state list
   36  terraform destroy --auto-apporve
   37  terraform destroy --auto-approve
   38  history

=========================================
VARIABLES, OUTPUTS AND IMPORT

TERRAFORM VAR FILES:
these files used to store variables seperately on terraform.



cat main.tf
provider "aws" {
region = "us-east-1"
}

resource "aws_instance" "one" {
count = var.instance_count
ami = "ami-03eb6185d756497f8"
instance_type = var.instance_type
tags = {
Name = "raham-server"
}
}

cat variable.tf
variable "instance_count" {
description = "*"
type = number
default = 3
}

variable "instance_type" {
description = "*"
type = string
default = "t2.micro"
}

terraform apply --auto-approve 
terraform destroy --auto-approve


cat main.tf
provider "aws" {
region = "ap-south-1"
}

resource "aws_instance" "one" {
count = var.instance_count
ami = "ami-0b41f7055516b991a"
instance_type = var.instance_type
tags = {
Name = "raham-server"
}
}

cat variable.tf
variable "instance_count" {
}

variable "instance_type" {
}

cat dev.tfvars
instance_count = 1

instance_type = "t2.micro"

cat test.tfvars
instance_count = 2

instance_type = "t2.medium"

terraform apply --auto-approve -var-file="dev.tfvars"
terraform destroy --auto-approve -var-file="dev.tfvars"


terraform apply --auto-approve -var-file="test.tfvars"
terraform destroy --auto-approve -var-file="test.tfvars"


TERRAFORM CLI:
we can pass inputs for terraform from cli.

provider "aws" {
region = "ap-south-1"
}

resource "aws_instance" "one" {
ami = "ami-0b41f7055516b991a"
instance_type = var.instance_type
tags = {
Name = "raham-server"
}
}

variable "instance_type" {
}

terraform apply --auto-approve -var="instance_type=t2.medium"
terraform destroy --auto-approve -var="instance_type=t2.medium"

TERRAFORM OUTPUTS: used to print the resource properties.
ex: public-ip, dns, instance type

provider "aws" {
region = "ap-south-1"
}

resource "aws_instance" "one" {
ami = "ami-0b41f7055516b991a"
instance_type = "t2.medium"
tags = {
Name = "raham-server"
}
}

output "raham" {
value = [aws_instance.one.public_ip, aws_instance.one.private_ip, aws_instance.one.public_dns, aws_instance.one.private_dns]
}


TERRAFORM IMPORT: used to import and track the resources which is created manually.


cat main.tf
provider "aws" {
region = "ap-south-1"
}

resource "aws_instance" "one" {
}

terraform import aws_instance.one i-0f4c0d5d3bb6dc758

  1  sudo yum install -y yum-utils shadow-utils
    2  sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
    3  sudo yum -y install terraform
    4  aws configure
    5  mkdir terraform
    6  cd terraform/
    7  vim main.tf
    8  vim variable.tf
    9  cat main.tf
   10  cat variable.tf
   11  terraform init
   12  terraform plan
   13  cd
   14  ls -al
   15  ll .aws/
   16  vim .aws/credentials
   17  cd terraform/
   18  terraform plan
   19  vim main.tf
   20  terraform plan
   21  vim main.tf
   22  terraform plan
   23  terraform apply --aut-approve
   24  terraform apply --auto-approve
   25  vim main.tf
   26  terraform apply --auto-approve
   27  terraform destroy --auto-approve
   28  vim variable.tf
   29  vim dev.tfvars
   30  vim test.tfvars
   31  cat main.tf
   32  cat variable.tf
   33  cat dev.tfvars
   34  cat test.tfvars
   35  terraform apply --auto-approve -var-file="dev.tfvars"
   36  terraform apply --auto-approve -var-file="test.tfvars"
   37  terraform destroy --auto-approve -var-file="test.tfvars"
   38  vim dev.tfvars
   39  terraform apply --auto-approve
   40  terraform apply --auto-approve -var-file="dev.tfvars"
   41  terraform destroy --auto-approve -var-file="dev.tfvars"
   42  rm -rf dev.tfvars test.tfvars variable.tf
   43  vim main.tf
   44  ll
   45  terraform apply --auto-approve
   46  terraform destroy --auto-approve
   47  terraform apply --auto-approve -var="instance_type=t2.medium"
   48  terraform destroy --auto-approve -var="instance_type=t2.medium"
   49  vim main.tf
   50  terraform apply --auto-approve
   51  vim main.tf
   52  terraform apply
   53  vim main.tf
   54  terraform apply --auto-approve
   55  terraform destroy --auto-approve
   56  vim main.tf
   57  cat terraform.tfstate
   58  vim main.tf
   59  cat main.tf
   60  terraform import aws_instance.one i-0f4c0d5d3bb6dc758
   61  cat terraform.tfstate
   62  terraform import --help
   63  terraform import -h
